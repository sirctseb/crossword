isCurrentUser(userId) {
    return auth != null && auth.uid = userId;
}

type Matrix<Type> extends Map<Index, Map<Index, Type>>;
type Presence<Type> extends Map<Type, Boolean>;
type CurrentUser extends UserId {
    validate() {
        isCurrentUser(this);
    }
}

/*
 * Core crossword document content types
 */
type Crossword {
    rows: Number
    symmetric: Boolean
    themeEntries: Boolean[]
    clues: Map<Direction, Matrix<String>>
    boxes: Matrix<Box>
    title: String | Null

    read() {
        auth.uid == root.permissions[key()].owner ||
        root.permissions[key()].collaborators[auth.uid]
    }

    create() {
        auth.uid == root.permissions[key()].owner
        && root.users[auth.uid].crosswords[key()] != null
    }

    delete() {
        auth.uid == root.permissions[key()].owner
    }

    update() {
        auth.uid == root.permissions[key()].owner ||
        root.permissions[key()].collaborators[auth.uid]
    }
}

// Subtype of String restricted to valid integers. This helps to ensure
// that a Map from this type will act well as an array
type Index extends String {
    validate() {
        this.test(/^[0-9]+$/)
    }
}

type Direction extends String {
    validate() {
        this.test(/(across|down)/)
    }
}

type Box {
    blocked: Boolean | Null,
    circled: Boolean | Null,
    shaded: Boolean | Null,
    content: String | Null,
}

path /crosswords is Crossword[] {}

/*
 * Crossword metadata and types for authoring features
 */
type CrosswordMetadata {
    title: String | Null,
}

type WordlistEntry {
    word: String,
    usedBy: Presence<CrosswordId>,
}

/*
 * User info, profile, and preferences
 */
type User {
    crosswords: CrosswordMetadata[],
    wordlist: WordlistEntry[],

    write() {
        key() == auth.uid
    }
    read() {
        key() == auth.uid
    }
}

path /users is User[] {}

/*
 * Permissions
 */
type Permissions {
    owner: UserId,
    collaborators: Presence<UserId>,
    global: Boolean | Null,

    create() {
        auth.uid != null &&
        auth.uid == this.owner
    }
    update() {
        auth.uid == this.owner
    }
    delete() {
        auth.uid == this.owner
    }
    validate() {
        this.owner == auth.uid &&
        (
            prior(this.owner) == null ||
            this.owner == prior(this.owner)
        )
    }
}

// would like to be able to ensure this user exists but we don't own that list
type UserId extends String {}

type CrosswordId extends String {
    validate() {
        root.crosswords[key()] != null
    }
}

path /permissions is Map<CrosswordId, Permissions> {}

/*
 * Cursors
 */
type Cursor {
    userId: CurrentUser

    row: Number | Null
    column: Number | Null
}

path /cursors is Map<CrosswordId, Cursor[]>;