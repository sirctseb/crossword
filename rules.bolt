type Matrix<Type> extends Map<Index, Map<Index, Type>> {}

type Crossword {
    rows: Number,
    symmetric: Boolean,
    themeEntries: Boolean[],
    clues: Matrix<String>
    boxes: Matrix<Box>

    create() {
        auth.uid == root.permissions[key()].owner
    }

    delete() {
        auth.uid === root.permissions[key()].owner
    }

    update() {
        auth.uid === root.permissions[key()].owner ||
        (
            root.permissions[key()].collaborators &&
            root.permissinos[key()].collaborators[auth.uid]
        )
    }
}

type Index extends String {
    validate() {
        this.test(/^[0-9]+$/)
    }
}

type Box {
    blocked: Boolean | Null,
    circled: Boolean | Null,
    shaded: Boolean | Null,
    content: String | Null,
}

path /crosswords is Crossword[] {}

type CrosswordMetadata {
    title: String | Null,
}

type User {
    crosswords: CrosswordMetadata[],

    create() {
        key() === auth.uid
    }
    update() {
        key() === auth.uid
    }
    delete() {
        key() === auth.uid
    }
}

path /users is User[] {}

type Permissions {
    owner: UserId,
    collaborators: Map<UserId, Boolean>,
    global: Boolean | Null,

    create() {
        key() === auth.uid
    }
    update() {
        key() === auth.uid
    }
    delete() {
        key() === auth.uid
    }
}

// would like to be able to ensure this user exists but we don't own that list
type UserId extends String {}

type CrosswordId extends String {
    validate() {
        root.crosswords[key()].exists()
    }
}

path /permissions is Map<CrosswordId, Permissions> {}
